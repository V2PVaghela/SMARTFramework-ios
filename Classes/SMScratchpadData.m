/*
 SMScratchpadData.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-04-01.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMScratchpadData.h"
#import "SMARTObjects.h"
#import "SMRecord+Calls.h"
#import "SMServer.h"

#import <Redland-ObjC.h>


@implementation SMScratchpadData

@synthesize stringValue = _stringValue;


#pragma mark - Setter and Getter Overrides
/*
 *  Setting data unsets stringValue, which if accessed will try to parse a string from data.
 */
- (void)setData:(NSData *)data
{
	if (data != _data) {
		_data = [data copy];
		self.stringValue = nil;
	}
}

/*
 *  If string value is not set but data is set, will try to interpret data as UTF-8 encoded string.
 */
- (NSString *)stringValue
{
	if (!_stringValue && _data) {
		self.stringValue = [[NSString alloc] initWithData:_data encoding:NSUTF8StringEncoding];
	}
	return _stringValue;
}

/*
 *  Setting stringValue also updates data (uses UTF-8 string encoding - !).
 */
- (void)setStringValue:(NSString *)stringValue
{
	if (stringValue != _stringValue) {
		self.data = [stringValue dataUsingEncoding:NSUTF8StringEncoding];
		_stringValue = [stringValue copy];
	}
}



#pragma mark - Reading and Writing Data
/*
 *  Overridden to fill our ivars.
 */
- (void)get:(SMCancelErrorBlock)callback
{
	[self get:self.basePath
	 callback:^(BOOL success, NSDictionary *__autoreleasing userInfo) {
		 
		 // on success, update our ivars
		 if (success) {
			 self.contentType = [userInfo objectForKey:SMARTResponseContentTypeKey];
			 self.data = [userInfo objectForKey:SMARTResponseDataKey];
		 }
		 
		 // call the callback
		 NSError *anError = [userInfo objectForKey:SMARTErrorKey];
		 CANCEL_ERROR_CALLBACK_OR_LOG_USER_INFO(callback, (!success && !anError), userInfo)
	 }];
}

/**
 *  Stores the current content of the "data" ivar on the server.
 *  @param callback A SMCancelErrorBlock block to be executed after the call returns from the server
 */
- (void)store:(SMCancelErrorBlock)callback
{
	if (!_data) {
		CANCEL_ERROR_CALLBACK_OR_LOG_ERR_STRING(callback, NO, @"No data to store on the server (\"data\" is nil)");
		return;
	}
	if (!self.record) {
		NSString *errStr = [NSString stringWithFormat:@"Fatal Error: I have no record! %@", self];
		CANCEL_ERROR_CALLBACK_OR_LOG_ERR_STRING(callback, NO, errStr)
		return;
	}
	
	[self.record performMethod:self.basePath
					  withBody:_data
				  orParameters:nil
						ofType:_contentType
					httpMethod:@"PUT"
					  callback:^(BOOL success, NSDictionary *__autoreleasing userInfo) {
						  NSError *anError = [userInfo objectForKey:SMARTErrorKey];
						  CANCEL_ERROR_CALLBACK_OR_LOG_USER_INFO(callback, (!success && !anError), userInfo)
					  }];
}

/**
 *  Deletes scratchpad data for this record (for your app).
 *  @param callback A SMCancelErrorBlock block to be executed after the call returns from the server
 */
- (void)delete:(SMCancelErrorBlock)callback
{
	if (!self.record) {
		NSString *errStr = [NSString stringWithFormat:@"Fatal Error: I have no record! %@", self];
		CANCEL_ERROR_CALLBACK_OR_LOG_ERR_STRING(callback, NO, errStr)
		return;
	}
	
	__block SMScratchpadData *this = self;
	
	[self.record performMethod:self.basePath
					  withBody:nil
				  orParameters:nil
						ofType:nil
					httpMethod:@"DELETE"
					  callback:^(BOOL success, NSDictionary *__autoreleasing userInfo) {
						  
						  // on success, mirror in our ivars
						  if (success) {
							  this.data = nil;
							  this.stringValue = nil;
						  }
						  
						  // call the callback
						  NSError *anError = [userInfo objectForKey:SMARTErrorKey];
						  CANCEL_ERROR_CALLBACK_OR_LOG_USER_INFO(callback, (!success && !anError), userInfo)
					  }];
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#ScratchpadData";
}

+ (NSString *)basePath
{
	return @"/records/{record_id}/apps/{smart_app_id}/scratchpad";
}


@end
