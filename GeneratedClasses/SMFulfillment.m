/*
 SMFulfillment.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMFulfillment.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMFulfillment


#pragma mark - Synthesized Lazy Getter
@synthesize belongsTo = _belongsTo;

- (SMMedicalRecord *)belongsTo
{
	if (!_belongsTo) {
		
		// get the "belongsTo" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMedicalRecord *obj = [SMMedicalRecord newWithSubject:rslt.object inModel:self.inModel];
		_belongsTo = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _belongsTo) {
		return nil;
	}
	
	return _belongsTo;
}

- (void)setBelongsTo:(SMMedicalRecord *)belongsTo
{
	if (belongsTo != _belongsTo) {
		RedlandNode *predicate = (belongsTo || _belongsTo) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"] : nil;
		if (_belongsTo) {
			[self.inModel removeSubmodel:_belongsTo.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_belongsTo = belongsTo;
		
		if (_belongsTo) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_belongsTo.subject]];
			[self.inModel addSubmodel:_belongsTo.model];
		}
	}
}

@synthesize date = _date;

- (NSString *)date
{
	if (!_date) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_date = [rslt.object literalValue];
	}
	return _date;
}

- (void)setDate:(NSString *)date
{
	if (date != _date) {
		RedlandNode *predicate = (date || _date) ? [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"] : nil;
		if (_date) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_date = [date copy];
		
		if (_date) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_date nodeValue]]];
		}
	}
}

@synthesize dispenseDaysSupply = _dispenseDaysSupply;

- (NSString *)dispenseDaysSupply
{
	if (!_dispenseDaysSupply) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dispenseDaysSupply"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_dispenseDaysSupply = [rslt.object literalValue];
	}
	return _dispenseDaysSupply;
}

- (void)setDispenseDaysSupply:(NSString *)dispenseDaysSupply
{
	if (dispenseDaysSupply != _dispenseDaysSupply) {
		RedlandNode *predicate = (dispenseDaysSupply || _dispenseDaysSupply) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dispenseDaysSupply"] : nil;
		if (_dispenseDaysSupply) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_dispenseDaysSupply = [dispenseDaysSupply copy];
		
		if (_dispenseDaysSupply) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_dispenseDaysSupply nodeValue]]];
		}
	}
}

@synthesize medication = _medication;

- (SMMedication *)medication
{
	if (!_medication) {
		
		// get the "medication" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#medication"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMedication *obj = [SMMedication newWithSubject:rslt.object inModel:self.inModel];
		_medication = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _medication) {
		return nil;
	}
	
	return _medication;
}

- (void)setMedication:(SMMedication *)medication
{
	if (medication != _medication) {
		RedlandNode *predicate = (medication || _medication) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#medication"] : nil;
		if (_medication) {
			[self.inModel removeSubmodel:_medication.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_medication = medication;
		
		if (_medication) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_medication.subject]];
			[self.inModel addSubmodel:_medication.model];
		}
	}
}

@synthesize pbm = _pbm;

- (NSString *)pbm
{
	if (!_pbm) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#pbm"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_pbm = [rslt.object literalValue];
	}
	return _pbm;
}

- (void)setPbm:(NSString *)pbm
{
	if (pbm != _pbm) {
		RedlandNode *predicate = (pbm || _pbm) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#pbm"] : nil;
		if (_pbm) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_pbm = [pbm copy];
		
		if (_pbm) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_pbm nodeValue]]];
		}
	}
}

@synthesize pharmacy = _pharmacy;

- (SMPharmacy *)pharmacy
{
	if (!_pharmacy) {
		
		// get the "pharmacy" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#pharmacy"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMPharmacy *obj = [SMPharmacy newWithSubject:rslt.object inModel:self.inModel];
		_pharmacy = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _pharmacy) {
		return nil;
	}
	
	return _pharmacy;
}

- (void)setPharmacy:(SMPharmacy *)pharmacy
{
	if (pharmacy != _pharmacy) {
		RedlandNode *predicate = (pharmacy || _pharmacy) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#pharmacy"] : nil;
		if (_pharmacy) {
			[self.inModel removeSubmodel:_pharmacy.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_pharmacy = pharmacy;
		
		if (_pharmacy) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_pharmacy.subject]];
			[self.inModel addSubmodel:_pharmacy.model];
		}
	}
}

@synthesize provider = _provider;

- (SMProvider *)provider
{
	if (!_provider) {
		
		// get the "provider" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#provider"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMProvider *obj = [SMProvider newWithSubject:rslt.object inModel:self.inModel];
		_provider = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _provider) {
		return nil;
	}
	
	return _provider;
}

- (void)setProvider:(SMProvider *)provider
{
	if (provider != _provider) {
		RedlandNode *predicate = (provider || _provider) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#provider"] : nil;
		if (_provider) {
			[self.inModel removeSubmodel:_provider.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_provider = provider;
		
		if (_provider) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_provider.subject]];
			[self.inModel addSubmodel:_provider.model];
		}
	}
}

@synthesize quantityDispensed = _quantityDispensed;

- (SMValueAndUnit *)quantityDispensed
{
	if (!_quantityDispensed) {
		
		// get the "quantityDispensed" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#quantityDispensed"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_quantityDispensed = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _quantityDispensed) {
		return nil;
	}
	
	return _quantityDispensed;
}

- (void)setQuantityDispensed:(SMValueAndUnit *)quantityDispensed
{
	if (quantityDispensed != _quantityDispensed) {
		RedlandNode *predicate = (quantityDispensed || _quantityDispensed) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#quantityDispensed"] : nil;
		if (_quantityDispensed) {
			[self.inModel removeSubmodel:_quantityDispensed.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_quantityDispensed = quantityDispensed;
		
		if (_quantityDispensed) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_quantityDispensed.subject]];
			[self.inModel addSubmodel:_quantityDispensed.model];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#Fulfillment";
}

+ (NSString *)basePath
{
	return @"/records/{record_id}/fulfillments/{uuid}";
}


@end
