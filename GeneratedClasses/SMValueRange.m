/*
 SMValueRange.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMValueRange.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMValueRange


#pragma mark - Synthesized Lazy Getter
@synthesize maximum = _maximum;

- (SMValueAndUnit *)maximum
{
	if (!_maximum) {
		
		// get the "maximum" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#maximum"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_maximum = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _maximum) {
		return nil;
	}
	
	return _maximum;
}

- (void)setMaximum:(SMValueAndUnit *)maximum
{
	if (maximum != _maximum) {
		RedlandNode *predicate = (maximum || _maximum) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#maximum"] : nil;
		if (_maximum) {
			[self.inModel removeSubmodel:_maximum.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_maximum = maximum;
		
		if (_maximum) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_maximum.subject]];
			[self.inModel addSubmodel:_maximum.model];
		}
	}
}

@synthesize minimum = _minimum;

- (SMValueAndUnit *)minimum
{
	if (!_minimum) {
		
		// get the "minimum" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#minimum"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_minimum = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _minimum) {
		return nil;
	}
	
	return _minimum;
}

- (void)setMinimum:(SMValueAndUnit *)minimum
{
	if (minimum != _minimum) {
		RedlandNode *predicate = (minimum || _minimum) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#minimum"] : nil;
		if (_minimum) {
			[self.inModel removeSubmodel:_minimum.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_minimum = minimum;
		
		if (_minimum) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_minimum.subject]];
			[self.inModel addSubmodel:_minimum.model];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#ValueRange";
}




@end
