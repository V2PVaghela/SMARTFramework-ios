/*
 SMMedicalImage.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2014-05-13.
 Copyright (c) 2014 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMMedicalImage.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMMedicalImage


#pragma mark - Synthesized Lazy Getter
@synthesize belongsTo = _belongsTo;

- (SMMedicalRecord *)belongsTo
{
	if (!_belongsTo) {
		
		// get the "belongsTo" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMedicalRecord *obj = [SMMedicalRecord newWithSubject:rslt.object inModel:self.inModel];
		_belongsTo = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _belongsTo) {
		return nil;
	}
	
	return _belongsTo;
}

- (void)setBelongsTo:(SMMedicalRecord *)belongsTo
{
	if (belongsTo != _belongsTo) {
		RedlandNode *predicate = (belongsTo || _belongsTo) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"] : nil;
		if (_belongsTo) {
			[self.inModel removeSubmodel:_belongsTo.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_belongsTo = belongsTo;
		
		if (_belongsTo) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_belongsTo.subject]];
			[self.inModel addSubmodel:_belongsTo.model];
		}
	}
}

@synthesize date = _date;

- (NSString *)date
{
	if (!_date) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_date = [rslt.object literalValue];
	}
	return _date;
}

- (void)setDate:(NSString *)date
{
	if (date != _date) {
		RedlandNode *predicate = (date || _date) ? [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"] : nil;
		if (_date) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_date = [date copy];
		
		if (_date) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_date nodeValue]]];
		}
	}
}

@synthesize dicomImageUID = _dicomImageUID;

- (NSString *)dicomImageUID
{
	if (!_dicomImageUID) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dicomImageUID"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_dicomImageUID = [rslt.object literalValue];
	}
	return _dicomImageUID;
}

- (void)setDicomImageUID:(NSString *)dicomImageUID
{
	if (dicomImageUID != _dicomImageUID) {
		RedlandNode *predicate = (dicomImageUID || _dicomImageUID) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dicomImageUID"] : nil;
		if (_dicomImageUID) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_dicomImageUID = [dicomImageUID copy];
		
		if (_dicomImageUID) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_dicomImageUID nodeValue]]];
		}
	}
}

@synthesize dicomSeriesUID = _dicomSeriesUID;

- (NSString *)dicomSeriesUID
{
	if (!_dicomSeriesUID) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dicomSeriesUID"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_dicomSeriesUID = [rslt.object literalValue];
	}
	return _dicomSeriesUID;
}

- (void)setDicomSeriesUID:(NSString *)dicomSeriesUID
{
	if (dicomSeriesUID != _dicomSeriesUID) {
		RedlandNode *predicate = (dicomSeriesUID || _dicomSeriesUID) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dicomSeriesUID"] : nil;
		if (_dicomSeriesUID) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_dicomSeriesUID = [dicomSeriesUID copy];
		
		if (_dicomSeriesUID) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_dicomSeriesUID nodeValue]]];
		}
	}
}

@synthesize dicomStudyUID = _dicomStudyUID;

- (NSString *)dicomStudyUID
{
	if (!_dicomStudyUID) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dicomStudyUID"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_dicomStudyUID = [rslt.object literalValue];
	}
	return _dicomStudyUID;
}

- (void)setDicomStudyUID:(NSString *)dicomStudyUID
{
	if (dicomStudyUID != _dicomStudyUID) {
		RedlandNode *predicate = (dicomStudyUID || _dicomStudyUID) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#dicomStudyUID"] : nil;
		if (_dicomStudyUID) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_dicomStudyUID = [dicomStudyUID copy];
		
		if (_dicomStudyUID) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_dicomStudyUID nodeValue]]];
		}
	}
}

@synthesize documentType = _documentType;

- (NSArray *)documentType
{
	if (!_documentType) {
		
		// get the "documentType" elements
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#documentType"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop through the results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			
			// instantiate an item for each object
			SMCodedValue *newItem = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_documentType = [arr copy];
	}
	return _documentType;
}

- (void)setDocumentType:(NSArray *)documentType
{
	if (documentType != _documentType) {
		RedlandNode *predicate = (documentType || _documentType) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#documentType"] : nil;
		if (_documentType) {
			for (SMCodedValue *item in _documentType) {
				[self.inModel removeSubmodel:item.model];
			}
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_documentType = [documentType copy];
		
		if (_documentType) {
			for (SMCodedValue *item in _documentType) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:item.subject]];
				[self.inModel addSubmodel:item.model];
			}
		}
	}
}

@synthesize fileName = _fileName;

- (NSString *)fileName
{
	if (!_fileName) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#fileName"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_fileName = [rslt.object literalValue];
	}
	return _fileName;
}

- (void)setFileName:(NSString *)fileName
{
	if (fileName != _fileName) {
		RedlandNode *predicate = (fileName || _fileName) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#fileName"] : nil;
		if (_fileName) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_fileName = [fileName copy];
		
		if (_fileName) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_fileName nodeValue]]];
		}
	}
}

@synthesize fileSize = _fileSize;

- (SMValueAndUnit *)fileSize
{
	if (!_fileSize) {
		
		// get the "fileSize" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#fileSize"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_fileSize = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _fileSize) {
		return nil;
	}
	
	return _fileSize;
}

- (void)setFileSize:(SMValueAndUnit *)fileSize
{
	if (fileSize != _fileSize) {
		RedlandNode *predicate = (fileSize || _fileSize) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#fileSize"] : nil;
		if (_fileSize) {
			[self.inModel removeSubmodel:_fileSize.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_fileSize = fileSize;
		
		if (_fileSize) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_fileSize.subject]];
			[self.inModel addSubmodel:_fileSize.model];
		}
	}
}

@synthesize format = _format;

- (SMMediaTypeOrExtent *)format
{
	if (!_format) {
		
		// get the "format" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/format"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMediaTypeOrExtent *obj = [SMMediaTypeOrExtent newWithSubject:rslt.object inModel:self.inModel];
		_format = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _format) {
		return nil;
	}
	
	return _format;
}

- (void)setFormat:(SMMediaTypeOrExtent *)format
{
	if (format != _format) {
		RedlandNode *predicate = (format || _format) ? [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/format"] : nil;
		if (_format) {
			[self.inModel removeSubmodel:_format.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_format = format;
		
		if (_format) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_format.subject]];
			[self.inModel addSubmodel:_format.model];
		}
	}
}

@synthesize imagingStudy = _imagingStudy;

- (NSArray *)imagingStudy
{
	if (!_imagingStudy) {
		
		// get the "imagingStudy" elements
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#imagingStudy"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop through the results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			
			// instantiate an item for each object
			SMImagingStudy *newItem = [SMImagingStudy newWithSubject:rslt.object inModel:self.inModel];
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_imagingStudy = [arr copy];
	}
	return _imagingStudy;
}

- (void)setImagingStudy:(NSArray *)imagingStudy
{
	if (imagingStudy != _imagingStudy) {
		RedlandNode *predicate = (imagingStudy || _imagingStudy) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#imagingStudy"] : nil;
		if (_imagingStudy) {
			for (SMImagingStudy *item in _imagingStudy) {
				[self.inModel removeSubmodel:item.model];
			}
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_imagingStudy = [imagingStudy copy];
		
		if (_imagingStudy) {
			for (SMImagingStudy *item in _imagingStudy) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:item.subject]];
				[self.inModel addSubmodel:item.model];
			}
		}
	}
}

@synthesize provider = _provider;

- (SMProvider *)provider
{
	if (!_provider) {
		
		// get the "provider" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#provider"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMProvider *obj = [SMProvider newWithSubject:rslt.object inModel:self.inModel];
		_provider = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _provider) {
		return nil;
	}
	
	return _provider;
}

- (void)setProvider:(SMProvider *)provider
{
	if (provider != _provider) {
		RedlandNode *predicate = (provider || _provider) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#provider"] : nil;
		if (_provider) {
			[self.inModel removeSubmodel:_provider.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_provider = provider;
		
		if (_provider) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_provider.subject]];
			[self.inModel addSubmodel:_provider.model];
		}
	}
}

@synthesize resource = _resource;

- (NSArray *)resource
{
	if (!_resource) {
		
		// get the "resource" elements
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#resource"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop through the results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			
			// instantiate an item for each object
			SMResource *newItem = [SMResource newWithSubject:rslt.object inModel:self.inModel];
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_resource = [arr copy];
	}
	return _resource;
}

- (void)setResource:(NSArray *)resource
{
	if (resource != _resource) {
		RedlandNode *predicate = (resource || _resource) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#resource"] : nil;
		if (_resource) {
			for (SMResource *item in _resource) {
				[self.inModel removeSubmodel:item.model];
			}
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_resource = [resource copy];
		
		if (_resource) {
			for (SMResource *item in _resource) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:item.subject]];
				[self.inModel addSubmodel:item.model];
			}
		}
	}
}

@synthesize title = _title;

- (NSString *)title
{
	if (!_title) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/title"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_title = [rslt.object literalValue];
	}
	return _title;
}

- (void)setTitle:(NSString *)title
{
	if (title != _title) {
		RedlandNode *predicate = (title || _title) ? [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/title"] : nil;
		if (_title) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_title = [title copy];
		
		if (_title) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_title nodeValue]]];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#MedicalImage";
}

+ (NSString *)basePath
{
	return @"/records/{record_id}/medical_images/{medical_image_id}";
}


@end
