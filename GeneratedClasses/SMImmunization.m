/*
 SMImmunization.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMImmunization.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMImmunization


#pragma mark - Synthesized Lazy Getter
@synthesize administrationStatus = _administrationStatus;

- (SMCodedValue *)administrationStatus
{
	if (!_administrationStatus) {
		
		// get the "administrationStatus" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#administrationStatus"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_administrationStatus = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _administrationStatus) {
		return nil;
	}
	
	return _administrationStatus;
}

- (void)setAdministrationStatus:(SMCodedValue *)administrationStatus
{
	if (administrationStatus != _administrationStatus) {
		RedlandNode *predicate = (administrationStatus || _administrationStatus) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#administrationStatus"] : nil;
		if (_administrationStatus) {
			[self.inModel removeSubmodel:_administrationStatus.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_administrationStatus = administrationStatus;
		
		if (_administrationStatus) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_administrationStatus.subject]];
			[self.inModel addSubmodel:_administrationStatus.model];
		}
	}
}

@synthesize belongsTo = _belongsTo;

- (SMMedicalRecord *)belongsTo
{
	if (!_belongsTo) {
		
		// get the "belongsTo" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMedicalRecord *obj = [SMMedicalRecord newWithSubject:rslt.object inModel:self.inModel];
		_belongsTo = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _belongsTo) {
		return nil;
	}
	
	return _belongsTo;
}

- (void)setBelongsTo:(SMMedicalRecord *)belongsTo
{
	if (belongsTo != _belongsTo) {
		RedlandNode *predicate = (belongsTo || _belongsTo) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"] : nil;
		if (_belongsTo) {
			[self.inModel removeSubmodel:_belongsTo.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_belongsTo = belongsTo;
		
		if (_belongsTo) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_belongsTo.subject]];
			[self.inModel addSubmodel:_belongsTo.model];
		}
	}
}

@synthesize date = _date;

- (NSString *)date
{
	if (!_date) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_date = [rslt.object literalValue];
	}
	return _date;
}

- (void)setDate:(NSString *)date
{
	if (date != _date) {
		RedlandNode *predicate = (date || _date) ? [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"] : nil;
		if (_date) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_date = [date copy];
		
		if (_date) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_date nodeValue]]];
		}
	}
}

@synthesize productClass = _productClass;

- (NSArray *)productClass
{
	if (!_productClass) {
		
		// get the "productClass" elements
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#productClass"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop through the results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			
			// instantiate an item for each object
			SMCodedValue *newItem = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_productClass = [arr copy];
	}
	return _productClass;
}

- (void)setProductClass:(NSArray *)productClass
{
	if (productClass != _productClass) {
		RedlandNode *predicate = (productClass || _productClass) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#productClass"] : nil;
		if (_productClass) {
			for (SMCodedValue *item in _productClass) {
				[self.inModel removeSubmodel:item.model];
			}
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_productClass = [productClass copy];
		
		if (_productClass) {
			for (SMCodedValue *item in _productClass) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:item.subject]];
				[self.inModel addSubmodel:item.model];
			}
		}
	}
}

@synthesize productName = _productName;

- (SMCodedValue *)productName
{
	if (!_productName) {
		
		// get the "productName" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#productName"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_productName = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _productName) {
		return nil;
	}
	
	return _productName;
}

- (void)setProductName:(SMCodedValue *)productName
{
	if (productName != _productName) {
		RedlandNode *predicate = (productName || _productName) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#productName"] : nil;
		if (_productName) {
			[self.inModel removeSubmodel:_productName.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_productName = productName;
		
		if (_productName) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_productName.subject]];
			[self.inModel addSubmodel:_productName.model];
		}
	}
}

@synthesize refusalReason = _refusalReason;

- (SMCodedValue *)refusalReason
{
	if (!_refusalReason) {
		
		// get the "refusalReason" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#refusalReason"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_refusalReason = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _refusalReason) {
		return nil;
	}
	
	return _refusalReason;
}

- (void)setRefusalReason:(SMCodedValue *)refusalReason
{
	if (refusalReason != _refusalReason) {
		RedlandNode *predicate = (refusalReason || _refusalReason) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#refusalReason"] : nil;
		if (_refusalReason) {
			[self.inModel removeSubmodel:_refusalReason.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_refusalReason = refusalReason;
		
		if (_refusalReason) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_refusalReason.subject]];
			[self.inModel addSubmodel:_refusalReason.model];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#Immunization";
}

+ (NSString *)basePath
{
	return @"/records/{record_id}/immunizations/{uuid}";
}


@end
