/*
 SMQuantitativeResult.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMQuantitativeResult.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMQuantitativeResult


#pragma mark - Synthesized Lazy Getter
@synthesize nonCriticalRange = _nonCriticalRange;

- (SMValueRange *)nonCriticalRange
{
	if (!_nonCriticalRange) {
		
		// get the "nonCriticalRange" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#nonCriticalRange"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueRange *obj = [SMValueRange newWithSubject:rslt.object inModel:self.inModel];
		_nonCriticalRange = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _nonCriticalRange) {
		return nil;
	}
	
	return _nonCriticalRange;
}

- (void)setNonCriticalRange:(SMValueRange *)nonCriticalRange
{
	if (nonCriticalRange != _nonCriticalRange) {
		RedlandNode *predicate = (nonCriticalRange || _nonCriticalRange) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#nonCriticalRange"] : nil;
		if (_nonCriticalRange) {
			[self.inModel removeSubmodel:_nonCriticalRange.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_nonCriticalRange = nonCriticalRange;
		
		if (_nonCriticalRange) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_nonCriticalRange.subject]];
			[self.inModel addSubmodel:_nonCriticalRange.model];
		}
	}
}

@synthesize normalRange = _normalRange;

- (SMValueRange *)normalRange
{
	if (!_normalRange) {
		
		// get the "normalRange" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#normalRange"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueRange *obj = [SMValueRange newWithSubject:rslt.object inModel:self.inModel];
		_normalRange = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _normalRange) {
		return nil;
	}
	
	return _normalRange;
}

- (void)setNormalRange:(SMValueRange *)normalRange
{
	if (normalRange != _normalRange) {
		RedlandNode *predicate = (normalRange || _normalRange) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#normalRange"] : nil;
		if (_normalRange) {
			[self.inModel removeSubmodel:_normalRange.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_normalRange = normalRange;
		
		if (_normalRange) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_normalRange.subject]];
			[self.inModel addSubmodel:_normalRange.model];
		}
	}
}

@synthesize valueAndUnit = _valueAndUnit;

- (SMValueAndUnit *)valueAndUnit
{
	if (!_valueAndUnit) {
		
		// get the "valueAndUnit" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#valueAndUnit"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_valueAndUnit = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _valueAndUnit) {
		return nil;
	}
	
	return _valueAndUnit;
}

- (void)setValueAndUnit:(SMValueAndUnit *)valueAndUnit
{
	if (valueAndUnit != _valueAndUnit) {
		RedlandNode *predicate = (valueAndUnit || _valueAndUnit) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#valueAndUnit"] : nil;
		if (_valueAndUnit) {
			[self.inModel removeSubmodel:_valueAndUnit.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_valueAndUnit = valueAndUnit;
		
		if (_valueAndUnit) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_valueAndUnit.subject]];
			[self.inModel addSubmodel:_valueAndUnit.model];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#QuantitativeResult";
}




@end
