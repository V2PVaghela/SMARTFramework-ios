/*
 SMResource.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMResource.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMResource


#pragma mark - Synthesized Lazy Getter
@synthesize content = _content;

- (SMContent *)content
{
	if (!_content) {
		
		// get the "content" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#content"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMContent *obj = [SMContent newWithSubject:rslt.object inModel:self.inModel];
		_content = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _content) {
		return nil;
	}
	
	return _content;
}

- (void)setContent:(SMContent *)content
{
	if (content != _content) {
		RedlandNode *predicate = (content || _content) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#content"] : nil;
		if (_content) {
			[self.inModel removeSubmodel:_content.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_content = content;
		
		if (_content) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_content.subject]];
			[self.inModel addSubmodel:_content.model];
		}
	}
}

@synthesize hash = _hash;

- (SMHash *)hash
{
	if (!_hash) {
		
		// get the "hash" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#hash"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMHash *obj = [SMHash newWithSubject:rslt.object inModel:self.inModel];
		_hash = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _hash) {
		return nil;
	}
	
	return _hash;
}

- (void)setHash:(SMHash *)hash
{
	if (hash != _hash) {
		RedlandNode *predicate = (hash || _hash) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#hash"] : nil;
		if (_hash) {
			[self.inModel removeSubmodel:_hash.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_hash = hash;
		
		if (_hash) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_hash.subject]];
			[self.inModel addSubmodel:_hash.model];
		}
	}
}

@synthesize location = _location;

- (NSString *)location
{
	if (!_location) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#location"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_location = [rslt.object literalValue];
	}
	return _location;
}

- (void)setLocation:(NSString *)location
{
	if (location != _location) {
		RedlandNode *predicate = (location || _location) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#location"] : nil;
		if (_location) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_location = [location copy];
		
		if (_location) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_location nodeValue]]];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#Resource";
}




@end
