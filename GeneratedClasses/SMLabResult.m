/*
 SMLabResult.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMLabResult.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMLabResult


#pragma mark - Synthesized Lazy Getter
@synthesize abnormalInterpretation = _abnormalInterpretation;

- (SMCodedValue *)abnormalInterpretation
{
	if (!_abnormalInterpretation) {
		
		// get the "abnormalInterpretation" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#abnormalInterpretation"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_abnormalInterpretation = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _abnormalInterpretation) {
		return nil;
	}
	
	return _abnormalInterpretation;
}

- (void)setAbnormalInterpretation:(SMCodedValue *)abnormalInterpretation
{
	if (abnormalInterpretation != _abnormalInterpretation) {
		RedlandNode *predicate = (abnormalInterpretation || _abnormalInterpretation) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#abnormalInterpretation"] : nil;
		if (_abnormalInterpretation) {
			[self.inModel removeSubmodel:_abnormalInterpretation.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_abnormalInterpretation = abnormalInterpretation;
		
		if (_abnormalInterpretation) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_abnormalInterpretation.subject]];
			[self.inModel addSubmodel:_abnormalInterpretation.model];
		}
	}
}

@synthesize accessionNumber = _accessionNumber;

- (NSString *)accessionNumber
{
	if (!_accessionNumber) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#accessionNumber"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_accessionNumber = [rslt.object literalValue];
	}
	return _accessionNumber;
}

- (void)setAccessionNumber:(NSString *)accessionNumber
{
	if (accessionNumber != _accessionNumber) {
		RedlandNode *predicate = (accessionNumber || _accessionNumber) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#accessionNumber"] : nil;
		if (_accessionNumber) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_accessionNumber = [accessionNumber copy];
		
		if (_accessionNumber) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_accessionNumber nodeValue]]];
		}
	}
}

@synthesize belongsTo = _belongsTo;

- (SMMedicalRecord *)belongsTo
{
	if (!_belongsTo) {
		
		// get the "belongsTo" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMedicalRecord *obj = [SMMedicalRecord newWithSubject:rslt.object inModel:self.inModel];
		_belongsTo = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _belongsTo) {
		return nil;
	}
	
	return _belongsTo;
}

- (void)setBelongsTo:(SMMedicalRecord *)belongsTo
{
	if (belongsTo != _belongsTo) {
		RedlandNode *predicate = (belongsTo || _belongsTo) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"] : nil;
		if (_belongsTo) {
			[self.inModel removeSubmodel:_belongsTo.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_belongsTo = belongsTo;
		
		if (_belongsTo) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_belongsTo.subject]];
			[self.inModel addSubmodel:_belongsTo.model];
		}
	}
}

@synthesize date = _date;

- (NSString *)date
{
	if (!_date) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_date = [rslt.object literalValue];
	}
	return _date;
}

- (void)setDate:(NSString *)date
{
	if (date != _date) {
		RedlandNode *predicate = (date || _date) ? [RedlandNode nodeWithURIString:@"http://purl.org/dc/terms/date"] : nil;
		if (_date) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_date = [date copy];
		
		if (_date) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_date nodeValue]]];
		}
	}
}

@synthesize labName = _labName;

- (SMCodedValue *)labName
{
	if (!_labName) {
		
		// get the "labName" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#labName"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_labName = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _labName) {
		return nil;
	}
	
	return _labName;
}

- (void)setLabName:(SMCodedValue *)labName
{
	if (labName != _labName) {
		RedlandNode *predicate = (labName || _labName) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#labName"] : nil;
		if (_labName) {
			[self.inModel removeSubmodel:_labName.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_labName = labName;
		
		if (_labName) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_labName.subject]];
			[self.inModel addSubmodel:_labName.model];
		}
	}
}

@synthesize labStatus = _labStatus;

- (SMCodedValue *)labStatus
{
	if (!_labStatus) {
		
		// get the "labStatus" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#labStatus"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_labStatus = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _labStatus) {
		return nil;
	}
	
	return _labStatus;
}

- (void)setLabStatus:(SMCodedValue *)labStatus
{
	if (labStatus != _labStatus) {
		RedlandNode *predicate = (labStatus || _labStatus) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#labStatus"] : nil;
		if (_labStatus) {
			[self.inModel removeSubmodel:_labStatus.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_labStatus = labStatus;
		
		if (_labStatus) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_labStatus.subject]];
			[self.inModel addSubmodel:_labStatus.model];
		}
	}
}

@synthesize narrativeResult = _narrativeResult;

- (SMNarrativeResult *)narrativeResult
{
	if (!_narrativeResult) {
		
		// get the "narrativeResult" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#narrativeResult"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMNarrativeResult *obj = [SMNarrativeResult newWithSubject:rslt.object inModel:self.inModel];
		_narrativeResult = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _narrativeResult) {
		return nil;
	}
	
	return _narrativeResult;
}

- (void)setNarrativeResult:(SMNarrativeResult *)narrativeResult
{
	if (narrativeResult != _narrativeResult) {
		RedlandNode *predicate = (narrativeResult || _narrativeResult) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#narrativeResult"] : nil;
		if (_narrativeResult) {
			[self.inModel removeSubmodel:_narrativeResult.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_narrativeResult = narrativeResult;
		
		if (_narrativeResult) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_narrativeResult.subject]];
			[self.inModel addSubmodel:_narrativeResult.model];
		}
	}
}

@synthesize notes = _notes;

- (NSString *)notes
{
	if (!_notes) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#notes"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_notes = [rslt.object literalValue];
	}
	return _notes;
}

- (void)setNotes:(NSString *)notes
{
	if (notes != _notes) {
		RedlandNode *predicate = (notes || _notes) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#notes"] : nil;
		if (_notes) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_notes = [notes copy];
		
		if (_notes) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_notes nodeValue]]];
		}
	}
}

@synthesize quantitativeResult = _quantitativeResult;

- (SMQuantitativeResult *)quantitativeResult
{
	if (!_quantitativeResult) {
		
		// get the "quantitativeResult" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#quantitativeResult"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMQuantitativeResult *obj = [SMQuantitativeResult newWithSubject:rslt.object inModel:self.inModel];
		_quantitativeResult = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _quantitativeResult) {
		return nil;
	}
	
	return _quantitativeResult;
}

- (void)setQuantitativeResult:(SMQuantitativeResult *)quantitativeResult
{
	if (quantitativeResult != _quantitativeResult) {
		RedlandNode *predicate = (quantitativeResult || _quantitativeResult) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#quantitativeResult"] : nil;
		if (_quantitativeResult) {
			[self.inModel removeSubmodel:_quantitativeResult.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_quantitativeResult = quantitativeResult;
		
		if (_quantitativeResult) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_quantitativeResult.subject]];
			[self.inModel addSubmodel:_quantitativeResult.model];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#LabResult";
}

+ (NSString *)basePath
{
	return @"/records/{record_id}/lab_results/{lab_result_id}";
}


@end
