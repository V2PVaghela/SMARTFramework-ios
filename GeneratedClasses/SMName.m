/*
 SMName.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMName.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMName


#pragma mark - Synthesized Lazy Getter
@synthesize additionalName = _additionalName;

- (NSArray *)additionalName
{
	if (!_additionalName) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#additional-name"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			NSString *newItem = [rslt.object literalValue];		// only works for NSString for now
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_additionalName = [arr copy];
	}
	return _additionalName;
}

- (void)setAdditionalName:(NSArray *)additionalName
{
	if (additionalName != _additionalName) {
		RedlandNode *predicate = (additionalName || _additionalName) ? [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#additional-name"] : nil;
		if (_additionalName) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_additionalName = [additionalName copy];
		
		if (_additionalName) {
			for (NSString *newItem in _additionalName) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[newItem nodeValue]]];
			}
		}
	}
}

@synthesize familyName = _familyName;

- (NSString *)familyName
{
	if (!_familyName) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#family-name"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_familyName = [rslt.object literalValue];
	}
	return _familyName;
}

- (void)setFamilyName:(NSString *)familyName
{
	if (familyName != _familyName) {
		RedlandNode *predicate = (familyName || _familyName) ? [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#family-name"] : nil;
		if (_familyName) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_familyName = [familyName copy];
		
		if (_familyName) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_familyName nodeValue]]];
		}
	}
}

@synthesize givenName = _givenName;

- (NSString *)givenName
{
	if (!_givenName) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#given-name"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_givenName = [rslt.object literalValue];
	}
	return _givenName;
}

- (void)setGivenName:(NSString *)givenName
{
	if (givenName != _givenName) {
		RedlandNode *predicate = (givenName || _givenName) ? [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#given-name"] : nil;
		if (_givenName) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_givenName = [givenName copy];
		
		if (_givenName) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_givenName nodeValue]]];
		}
	}
}

@synthesize honorificPrefix = _honorificPrefix;

- (NSArray *)honorificPrefix
{
	if (!_honorificPrefix) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#honorific-prefix"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			NSString *newItem = [rslt.object literalValue];		// only works for NSString for now
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_honorificPrefix = [arr copy];
	}
	return _honorificPrefix;
}

- (void)setHonorificPrefix:(NSArray *)honorificPrefix
{
	if (honorificPrefix != _honorificPrefix) {
		RedlandNode *predicate = (honorificPrefix || _honorificPrefix) ? [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#honorific-prefix"] : nil;
		if (_honorificPrefix) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_honorificPrefix = [honorificPrefix copy];
		
		if (_honorificPrefix) {
			for (NSString *newItem in _honorificPrefix) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[newItem nodeValue]]];
			}
		}
	}
}

@synthesize honorificSuffix = _honorificSuffix;

- (NSArray *)honorificSuffix
{
	if (!_honorificSuffix) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#honorific-suffix"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			NSString *newItem = [rslt.object literalValue];		// only works for NSString for now
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_honorificSuffix = [arr copy];
	}
	return _honorificSuffix;
}

- (void)setHonorificSuffix:(NSArray *)honorificSuffix
{
	if (honorificSuffix != _honorificSuffix) {
		RedlandNode *predicate = (honorificSuffix || _honorificSuffix) ? [RedlandNode nodeWithURIString:@"http://www.w3.org/2006/vcard/ns#honorific-suffix"] : nil;
		if (_honorificSuffix) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_honorificSuffix = [honorificSuffix copy];
		
		if (_honorificSuffix) {
			for (NSString *newItem in _honorificSuffix) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[newItem nodeValue]]];
			}
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://www.w3.org/2006/vcard/ns#Name";
}




@end
