/*
 SMMedication.m
 SMARTFramework
 
 Generated by build-obj-c-classes.py on 2013-06-14.
 Copyright (c) 2013 CHIP, Boston Children's Hospital
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#import "SMMedication.h"
#import "SMARTObjects.h"

#import <Redland-ObjC.h>


@implementation SMMedication


#pragma mark - Synthesized Lazy Getter
@synthesize belongsTo = _belongsTo;

- (SMMedicalRecord *)belongsTo
{
	if (!_belongsTo) {
		
		// get the "belongsTo" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMMedicalRecord *obj = [SMMedicalRecord newWithSubject:rslt.object inModel:self.inModel];
		_belongsTo = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _belongsTo) {
		return nil;
	}
	
	return _belongsTo;
}

- (void)setBelongsTo:(SMMedicalRecord *)belongsTo
{
	if (belongsTo != _belongsTo) {
		RedlandNode *predicate = (belongsTo || _belongsTo) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#belongsTo"] : nil;
		if (_belongsTo) {
			[self.inModel removeSubmodel:_belongsTo.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_belongsTo = belongsTo;
		
		if (_belongsTo) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_belongsTo.subject]];
			[self.inModel addSubmodel:_belongsTo.model];
		}
	}
}

@synthesize drugName = _drugName;

- (SMCodedValue *)drugName
{
	if (!_drugName) {
		
		// get the "drugName" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#drugName"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMCodedValue *obj = [SMCodedValue newWithSubject:rslt.object inModel:self.inModel];
		_drugName = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _drugName) {
		return nil;
	}
	
	return _drugName;
}

- (void)setDrugName:(SMCodedValue *)drugName
{
	if (drugName != _drugName) {
		RedlandNode *predicate = (drugName || _drugName) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#drugName"] : nil;
		if (_drugName) {
			[self.inModel removeSubmodel:_drugName.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_drugName = drugName;
		
		if (_drugName) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_drugName.subject]];
			[self.inModel addSubmodel:_drugName.model];
		}
	}
}

@synthesize endDate = _endDate;

- (NSString *)endDate
{
	if (!_endDate) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#endDate"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_endDate = [rslt.object literalValue];
	}
	return _endDate;
}

- (void)setEndDate:(NSString *)endDate
{
	if (endDate != _endDate) {
		RedlandNode *predicate = (endDate || _endDate) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#endDate"] : nil;
		if (_endDate) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_endDate = [endDate copy];
		
		if (_endDate) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_endDate nodeValue]]];
		}
	}
}

@synthesize frequency = _frequency;

- (SMValueAndUnit *)frequency
{
	if (!_frequency) {
		
		// get the "frequency" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#frequency"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_frequency = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _frequency) {
		return nil;
	}
	
	return _frequency;
}

- (void)setFrequency:(SMValueAndUnit *)frequency
{
	if (frequency != _frequency) {
		RedlandNode *predicate = (frequency || _frequency) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#frequency"] : nil;
		if (_frequency) {
			[self.inModel removeSubmodel:_frequency.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_frequency = frequency;
		
		if (_frequency) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_frequency.subject]];
			[self.inModel addSubmodel:_frequency.model];
		}
	}
}

@synthesize fulfillment = _fulfillment;

- (NSArray *)fulfillment
{
	if (!_fulfillment) {
		
		// get the "fulfillment" elements
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#fulfillment"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop through the results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			
			// instantiate an item for each object
			SMFulfillment *newItem = [SMFulfillment newWithSubject:rslt.object inModel:self.inModel];
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_fulfillment = [arr copy];
	}
	return _fulfillment;
}

- (void)setFulfillment:(NSArray *)fulfillment
{
	if (fulfillment != _fulfillment) {
		RedlandNode *predicate = (fulfillment || _fulfillment) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#fulfillment"] : nil;
		if (_fulfillment) {
			for (SMFulfillment *item in _fulfillment) {
				[self.inModel removeSubmodel:item.model];
			}
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_fulfillment = [fulfillment copy];
		
		if (_fulfillment) {
			for (SMFulfillment *item in _fulfillment) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:item.subject]];
				[self.inModel addSubmodel:item.model];
			}
		}
	}
}

@synthesize instructions = _instructions;

- (NSString *)instructions
{
	if (!_instructions) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#instructions"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_instructions = [rslt.object literalValue];
	}
	return _instructions;
}

- (void)setInstructions:(NSString *)instructions
{
	if (instructions != _instructions) {
		RedlandNode *predicate = (instructions || _instructions) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#instructions"] : nil;
		if (_instructions) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_instructions = [instructions copy];
		
		if (_instructions) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_instructions nodeValue]]];
		}
	}
}

@synthesize provenance = _provenance;

- (NSArray *)provenance
{
	if (!_provenance) {
		
		// get the "provenance" elements
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#provenance"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		// loop through the results
		NSMutableArray *arr = [NSMutableArray array];
		RedlandStatement *rslt = nil;
		while ((rslt = [query nextObject])) {
			
			// instantiate an item for each object
			SMCode *newItem = [SMCode newWithSubject:rslt.object inModel:self.inModel];
			if (newItem) {
				[arr addObject:newItem];
			}
		}
		_provenance = [arr copy];
	}
	return _provenance;
}

- (void)setProvenance:(NSArray *)provenance
{
	if (provenance != _provenance) {
		RedlandNode *predicate = (provenance || _provenance) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#provenance"] : nil;
		if (_provenance) {
			for (SMCode *item in _provenance) {
				[self.inModel removeSubmodel:item.model];
			}
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_provenance = [provenance copy];
		
		if (_provenance) {
			for (SMCode *item in _provenance) {
				[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:item.subject]];
				[self.inModel addSubmodel:item.model];
			}
		}
	}
}

@synthesize quantity = _quantity;

- (SMValueAndUnit *)quantity
{
	if (!_quantity) {
		
		// get the "quantity" element
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#quantity"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		RedlandStatement *rslt = [query nextObject];
		
		// create an item for this object
		SMValueAndUnit *obj = [SMValueAndUnit newWithSubject:rslt.object inModel:self.inModel];
		_quantity = obj ? obj : (id)[NSNull null];
	}
	
	// we use NSNull as a placeholder in case we already searched the graph and haven't found the object. This should help with performance.
	if ((id)[NSNull null] == _quantity) {
		return nil;
	}
	
	return _quantity;
}

- (void)setQuantity:(SMValueAndUnit *)quantity
{
	if (quantity != _quantity) {
		RedlandNode *predicate = (quantity || _quantity) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#quantity"] : nil;
		if (_quantity) {
			[self.inModel removeSubmodel:_quantity.model];
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_quantity = quantity;
		
		if (_quantity) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:_quantity.subject]];
			[self.inModel addSubmodel:_quantity.model];
		}
	}
}

@synthesize startDate = _startDate;

- (NSString *)startDate
{
	if (!_startDate) {
		RedlandNode *predicate = [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#startDate"];
		RedlandStatement *statement = [RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil];
		RedlandStreamEnumerator *query = [self.inModel enumeratorOfStatementsLike:statement];
		
		RedlandStatement *rslt = [query nextObject];
		_startDate = [rslt.object literalValue];
	}
	return _startDate;
}

- (void)setStartDate:(NSString *)startDate
{
	if (startDate != _startDate) {
		RedlandNode *predicate = (startDate || _startDate) ? [RedlandNode nodeWithURIString:@"http://smartplatforms.org/terms#startDate"] : nil;
		if (_startDate) {
			[self.inModel removeStatementsLike:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:nil]];
		}
		
		_startDate = [startDate copy];
		
		if (_startDate) {
			[self.inModel addStatement:[RedlandStatement statementWithSubject:self.subject predicate:predicate object:[_startDate nodeValue]]];
		}
	}
}



#pragma mark - Class Properties
+ (NSString *)rdfType
{
	return @"http://smartplatforms.org/terms#Medication";
}

+ (NSString *)basePath
{
	return @"/records/{record_id}/medications/{uuid}";
}


@end
